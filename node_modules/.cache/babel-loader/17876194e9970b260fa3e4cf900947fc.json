{"ast":null,"code":"\"use strict\";\n\nvar defaultParseOptions = {\n  decodeValues: true,\n  map: false,\n  silent: false\n};\n\nfunction isNonEmptyString(str) {\n  return typeof str === \"string\" && !!str.trim();\n}\n\nfunction parseString(setCookieValue, options) {\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n  var nameValuePairStr = parts.shift();\n  var parsed = parseNameValuePair(nameValuePairStr);\n  var name = parsed.name;\n  var value = parsed.value;\n  options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n\n  try {\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n  } catch (e) {\n    console.error(\"set-cookie-parser encountered an error while decoding a cookie with value '\" + value + \"'. Set options.decodeValues to false to disable this feature.\", e);\n  }\n\n  var cookie = {\n    name: name,\n    value: value\n  };\n  parts.forEach(function (part) {\n    var sides = part.split(\"=\");\n    var key = sides.shift().trimLeft().toLowerCase();\n    var value = sides.join(\"=\");\n\n    if (key === \"expires\") {\n      cookie.expires = new Date(value);\n    } else if (key === \"max-age\") {\n      cookie.maxAge = parseInt(value, 10);\n    } else if (key === \"secure\") {\n      cookie.secure = true;\n    } else if (key === \"httponly\") {\n      cookie.httpOnly = true;\n    } else if (key === \"samesite\") {\n      cookie.sameSite = value;\n    } else if (key === \"partitioned\") {\n      cookie.partitioned = true;\n    } else {\n      cookie[key] = value;\n    }\n  });\n  return cookie;\n}\n\nfunction parseNameValuePair(nameValuePairStr) {\n  // Parses name-value-pair according to rfc6265bis draft\n  var name = \"\";\n  var value = \"\";\n  var nameValueArr = nameValuePairStr.split(\"=\");\n\n  if (nameValueArr.length > 1) {\n    name = nameValueArr.shift();\n    value = nameValueArr.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n  } else {\n    value = nameValuePairStr;\n  }\n\n  return {\n    name: name,\n    value: value\n  };\n}\n\nfunction parse(input, options) {\n  options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n\n  if (!input) {\n    if (!options.map) {\n      return [];\n    } else {\n      return {};\n    }\n  }\n\n  if (input.headers) {\n    if (typeof input.headers.getSetCookie === \"function\") {\n      // for fetch responses - they combine headers of the same type in the headers array,\n      // but getSetCookie returns an uncombined array\n      input = input.headers.getSetCookie();\n    } else if (input.headers[\"set-cookie\"]) {\n      // fast-path for node.js (which automatically normalizes header names to lower-case\n      input = input.headers[\"set-cookie\"];\n    } else {\n      // slow-path for other environments - see #25\n      var sch = input.headers[Object.keys(input.headers).find(function (key) {\n        return key.toLowerCase() === \"set-cookie\";\n      })]; // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n\n      if (!sch && input.headers.cookie && !options.silent) {\n        console.warn(\"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\");\n      }\n\n      input = sch;\n    }\n  }\n\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  if (!options.map) {\n    return input.filter(isNonEmptyString).map(function (str) {\n      return parseString(str, options);\n    });\n  } else {\n    var cookies = {};\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\n      var cookie = parseString(str, options);\n      cookies[cookie.name] = cookie;\n      return cookies;\n    }, cookies);\n  }\n}\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/\n\n\nfunction splitCookiesString(cookiesString) {\n  if (Array.isArray(cookiesString)) {\n    return cookiesString;\n  }\n\n  if (typeof cookiesString !== \"string\") {\n    return [];\n  }\n\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n\n    return pos < cookiesString.length;\n  }\n\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n        skipWhitespace();\n        nextStart = pos;\n\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        } // currently special character\n\n\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true; // pos is inside the next cookie, so back up and return it.\n\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n\n  return cookiesStrings;\n}\n\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;","map":{"version":3,"sources":["C:/Users/ngovantuan/Desktop/Demo/Frontend/NewsFrontEnd/node_modules/set-cookie-parser/lib/set-cookie.js"],"names":["defaultParseOptions","decodeValues","map","silent","isNonEmptyString","str","trim","parseString","setCookieValue","options","parts","split","filter","nameValuePairStr","shift","parsed","parseNameValuePair","name","value","Object","assign","decodeURIComponent","e","console","error","cookie","forEach","part","sides","key","trimLeft","toLowerCase","join","expires","Date","maxAge","parseInt","secure","httpOnly","sameSite","partitioned","nameValueArr","length","parse","input","headers","getSetCookie","sch","keys","find","warn","Array","isArray","cookies","reduce","splitCookiesString","cookiesString","cookiesStrings","pos","start","ch","lastComma","nextStart","cookiesSeparatorFound","skipWhitespace","test","charAt","notSpecialChar","push","substring","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar defaultParseOptions = {\n  decodeValues: true,\n  map: false,\n  silent: false,\n};\n\nfunction isNonEmptyString(str) {\n  return typeof str === \"string\" && !!str.trim();\n}\n\nfunction parseString(setCookieValue, options) {\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n\n  var nameValuePairStr = parts.shift();\n  var parsed = parseNameValuePair(nameValuePairStr);\n  var name = parsed.name;\n  var value = parsed.value;\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  try {\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n  } catch (e) {\n    console.error(\n      \"set-cookie-parser encountered an error while decoding a cookie with value '\" +\n        value +\n        \"'. Set options.decodeValues to false to disable this feature.\",\n      e\n    );\n  }\n\n  var cookie = {\n    name: name,\n    value: value,\n  };\n\n  parts.forEach(function (part) {\n    var sides = part.split(\"=\");\n    var key = sides.shift().trimLeft().toLowerCase();\n    var value = sides.join(\"=\");\n    if (key === \"expires\") {\n      cookie.expires = new Date(value);\n    } else if (key === \"max-age\") {\n      cookie.maxAge = parseInt(value, 10);\n    } else if (key === \"secure\") {\n      cookie.secure = true;\n    } else if (key === \"httponly\") {\n      cookie.httpOnly = true;\n    } else if (key === \"samesite\") {\n      cookie.sameSite = value;\n    } else if (key === \"partitioned\") {\n      cookie.partitioned = true;\n    } else {\n      cookie[key] = value;\n    }\n  });\n\n  return cookie;\n}\n\nfunction parseNameValuePair(nameValuePairStr) {\n  // Parses name-value-pair according to rfc6265bis draft\n\n  var name = \"\";\n  var value = \"\";\n  var nameValueArr = nameValuePairStr.split(\"=\");\n  if (nameValueArr.length > 1) {\n    name = nameValueArr.shift();\n    value = nameValueArr.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n  } else {\n    value = nameValuePairStr;\n  }\n\n  return { name: name, value: value };\n}\n\nfunction parse(input, options) {\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!input) {\n    if (!options.map) {\n      return [];\n    } else {\n      return {};\n    }\n  }\n\n  if (input.headers) {\n    if (typeof input.headers.getSetCookie === \"function\") {\n      // for fetch responses - they combine headers of the same type in the headers array,\n      // but getSetCookie returns an uncombined array\n      input = input.headers.getSetCookie();\n    } else if (input.headers[\"set-cookie\"]) {\n      // fast-path for node.js (which automatically normalizes header names to lower-case\n      input = input.headers[\"set-cookie\"];\n    } else {\n      // slow-path for other environments - see #25\n      var sch =\n        input.headers[\n          Object.keys(input.headers).find(function (key) {\n            return key.toLowerCase() === \"set-cookie\";\n          })\n        ];\n      // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n      if (!sch && input.headers.cookie && !options.silent) {\n        console.warn(\n          \"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\"\n        );\n      }\n      input = sch;\n    }\n  }\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  if (!options.map) {\n    return input.filter(isNonEmptyString).map(function (str) {\n      return parseString(str, options);\n    });\n  } else {\n    var cookies = {};\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\n      var cookie = parseString(str, options);\n      cookies[cookie.name] = cookie;\n      return cookies;\n    }, cookies);\n  }\n}\n\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/\nfunction splitCookiesString(cookiesString) {\n  if (Array.isArray(cookiesString)) {\n    return cookiesString;\n  }\n  if (typeof cookiesString !== \"string\") {\n    return [];\n  }\n\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n\n        skipWhitespace();\n        nextStart = pos;\n\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n\n        // currently special character\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true;\n          // pos is inside the next cookie, so back up and return it.\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n\n  return cookiesStrings;\n}\n\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;\n"]},"metadata":{},"sourceType":"script"}