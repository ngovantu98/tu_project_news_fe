{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\ngovantuan\\\\Desktop\\\\Demo\\\\Frontend\\\\NewsFrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _toArray = require(\"C:\\\\Users\\\\ngovantuan\\\\Desktop\\\\Demo\\\\Frontend\\\\NewsFrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toArray\");\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\ngovantuan\\\\Desktop\\\\Demo\\\\Frontend\\\\NewsFrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\ngovantuan\\\\Desktop\\\\Demo\\\\Frontend\\\\NewsFrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.flatten = void 0;\n\nvar utils_js_1 = require(\"./utils.js\");\n\nfunction flatten(input) {\n  var indices = this.indices;\n  var existing = indices.get(input);\n  if (existing) return [existing];\n  if (input === undefined) return utils_js_1.UNDEFINED;\n  if (input === null) return utils_js_1.NULL;\n  if (Number.isNaN(input)) return utils_js_1.NAN;\n  if (input === Number.POSITIVE_INFINITY) return utils_js_1.POSITIVE_INFINITY;\n  if (input === Number.NEGATIVE_INFINITY) return utils_js_1.NEGATIVE_INFINITY;\n  if (input === 0 && 1 / input < 0) return utils_js_1.NEGATIVE_ZERO;\n  var index = this.index++;\n  indices.set(input, index);\n  stringify.call(this, input, index);\n  return index;\n}\n\nexports.flatten = flatten;\n\nfunction stringify(input, index) {\n  var _this = this;\n\n  var deferred = this.deferred,\n      plugins = this.plugins,\n      postPlugins = this.postPlugins;\n  var str = this.stringified;\n  var stack = [[input, index]];\n\n  while (stack.length > 0) {\n    var _stack$pop = stack.pop(),\n        _stack$pop2 = _slicedToArray(_stack$pop, 2),\n        _input = _stack$pop2[0],\n        _index = _stack$pop2[1];\n\n    var partsForObj = function partsForObj(obj) {\n      return Object.keys(obj).map(function (k) {\n        return \"\\\"_\".concat(flatten.call(_this, k), \"\\\":\").concat(flatten.call(_this, obj[k]));\n      }).join(\",\");\n    };\n\n    var error = null;\n\n    switch (typeof _input) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        str[_index] = JSON.stringify(_input);\n        break;\n\n      case \"bigint\":\n        str[_index] = \"[\\\"\".concat(utils_js_1.TYPE_BIGINT, \"\\\",\\\"\").concat(_input, \"\\\"]\");\n        break;\n\n      case \"symbol\":\n        {\n          var keyFor = Symbol.keyFor(_input);\n\n          if (!keyFor) {\n            error = new Error(\"Cannot encode symbol unless created with Symbol.for()\");\n          } else {\n            str[_index] = \"[\\\"\".concat(utils_js_1.TYPE_SYMBOL, \"\\\",\").concat(JSON.stringify(keyFor), \"]\");\n          }\n\n          break;\n        }\n\n      case \"object\":\n        {\n          if (!_input) {\n            str[_index] = \"\".concat(utils_js_1.NULL);\n            break;\n          }\n\n          var isArray = Array.isArray(_input);\n          var pluginHandled = false;\n\n          if (!isArray && plugins) {\n            var _iterator = _createForOfIteratorHelper(plugins),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var plugin = _step.value;\n                var pluginResult = plugin(_input);\n\n                if (Array.isArray(pluginResult)) {\n                  pluginHandled = true;\n\n                  var _pluginResult = _toArray(pluginResult),\n                      pluginIdentifier = _pluginResult[0],\n                      rest = _pluginResult.slice(1);\n\n                  str[_index] = \"[\".concat(JSON.stringify(pluginIdentifier));\n\n                  if (rest.length > 0) {\n                    str[_index] += \",\".concat(rest.map(function (v) {\n                      return flatten.call(_this, v);\n                    }).join(\",\"));\n                  }\n\n                  str[_index] += \"]\";\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }\n\n          if (!pluginHandled) {\n            var result = isArray ? \"[\" : \"{\";\n\n            if (isArray) {\n              for (var i = 0; i < _input.length; i++) {\n                result += (i ? \",\" : \"\") + (i in _input ? flatten.call(this, _input[i]) : utils_js_1.HOLE);\n              }\n\n              str[_index] = \"\".concat(result, \"]\");\n            } else if (_input instanceof Date) {\n              str[_index] = \"[\\\"\".concat(utils_js_1.TYPE_DATE, \"\\\",\").concat(_input.getTime(), \"]\");\n            } else if (_input instanceof URL) {\n              str[_index] = \"[\\\"\".concat(utils_js_1.TYPE_URL, \"\\\",\").concat(JSON.stringify(_input.href), \"]\");\n            } else if (_input instanceof RegExp) {\n              str[_index] = \"[\\\"\".concat(utils_js_1.TYPE_REGEXP, \"\\\",\").concat(JSON.stringify(_input.source), \",\").concat(JSON.stringify(_input.flags), \"]\");\n            } else if (_input instanceof Set) {\n              if (_input.size > 0) {\n                str[_index] = \"[\\\"\".concat(utils_js_1.TYPE_SET, \"\\\",\").concat(_toConsumableArray(_input).map(function (val) {\n                  return flatten.call(_this, val);\n                }).join(\",\"), \"]\");\n              } else {\n                str[_index] = \"[\\\"\".concat(utils_js_1.TYPE_SET, \"\\\"]\");\n              }\n            } else if (_input instanceof Map) {\n              if (_input.size > 0) {\n                str[_index] = \"[\\\"\".concat(utils_js_1.TYPE_MAP, \"\\\",\").concat(_toConsumableArray(_input).flatMap(function (_ref) {\n                  var _ref2 = _slicedToArray(_ref, 2),\n                      k = _ref2[0],\n                      v = _ref2[1];\n\n                  return [flatten.call(_this, k), flatten.call(_this, v)];\n                }).join(\",\"), \"]\");\n              } else {\n                str[_index] = \"[\\\"\".concat(utils_js_1.TYPE_MAP, \"\\\"]\");\n              }\n            } else if (_input instanceof Promise) {\n              str[_index] = \"[\\\"\".concat(utils_js_1.TYPE_PROMISE, \"\\\",\").concat(_index, \"]\");\n              deferred[_index] = _input;\n            } else if (_input instanceof Error) {\n              str[_index] = \"[\\\"\".concat(utils_js_1.TYPE_ERROR, \"\\\",\").concat(JSON.stringify(_input.message));\n\n              if (_input.name !== \"Error\") {\n                str[_index] += \",\".concat(JSON.stringify(_input.name));\n              }\n\n              str[_index] += \"]\";\n            } else if (Object.getPrototypeOf(_input) === null) {\n              str[_index] = \"[\\\"\".concat(utils_js_1.TYPE_NULL_OBJECT, \"\\\",{\").concat(partsForObj(_input), \"}]\");\n            } else if (isPlainObject(_input)) {\n              str[_index] = \"{\".concat(partsForObj(_input), \"}\");\n            } else {\n              error = new Error(\"Cannot encode object with prototype\");\n            }\n          }\n\n          break;\n        }\n\n      default:\n        {\n          var _isArray = Array.isArray(_input);\n\n          var _pluginHandled = false;\n\n          if (!_isArray && plugins) {\n            var _iterator2 = _createForOfIteratorHelper(plugins),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _plugin = _step2.value;\n\n                var _pluginResult2 = _plugin(_input);\n\n                if (Array.isArray(_pluginResult2)) {\n                  _pluginHandled = true;\n\n                  var _pluginResult3 = _toArray(_pluginResult2),\n                      _pluginIdentifier = _pluginResult3[0],\n                      _rest = _pluginResult3.slice(1);\n\n                  str[_index] = \"[\".concat(JSON.stringify(_pluginIdentifier));\n\n                  if (_rest.length > 0) {\n                    str[_index] += \",\".concat(_rest.map(function (v) {\n                      return flatten.call(_this, v);\n                    }).join(\",\"));\n                  }\n\n                  str[_index] += \"]\";\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n\n          if (!_pluginHandled) {\n            error = new Error(\"Cannot encode function or unexpected type\");\n          }\n        }\n    }\n\n    if (error) {\n      var _pluginHandled2 = false;\n\n      if (postPlugins) {\n        var _iterator3 = _createForOfIteratorHelper(postPlugins),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _plugin2 = _step3.value;\n\n            var _pluginResult4 = _plugin2(_input);\n\n            if (Array.isArray(_pluginResult4)) {\n              _pluginHandled2 = true;\n\n              var _pluginResult5 = _toArray(_pluginResult4),\n                  _pluginIdentifier2 = _pluginResult5[0],\n                  _rest2 = _pluginResult5.slice(1);\n\n              str[_index] = \"[\".concat(JSON.stringify(_pluginIdentifier2));\n\n              if (_rest2.length > 0) {\n                str[_index] += \",\".concat(_rest2.map(function (v) {\n                  return flatten.call(_this, v);\n                }).join(\",\"));\n              }\n\n              str[_index] += \"]\";\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n\n      if (!_pluginHandled2) {\n        throw error;\n      }\n    }\n  }\n}\n\nvar objectProtoNames = Object.getOwnPropertyNames(Object.prototype).sort().join(\"\\0\");\n\nfunction isPlainObject(thing) {\n  var proto = Object.getPrototypeOf(thing);\n  return proto === Object.prototype || proto === null || Object.getOwnPropertyNames(proto).sort().join(\"\\0\") === objectProtoNames;\n}","map":{"version":3,"sources":["C:/Users/ngovantuan/Desktop/Demo/Frontend/NewsFrontEnd/node_modules/turbo-stream/dist/flatten.js"],"names":["Object","defineProperty","exports","value","flatten","utils_js_1","require","input","indices","existing","get","undefined","UNDEFINED","NULL","Number","isNaN","NAN","POSITIVE_INFINITY","NEGATIVE_INFINITY","NEGATIVE_ZERO","index","set","stringify","call","deferred","plugins","postPlugins","str","stringified","stack","length","pop","partsForObj","obj","keys","map","k","join","error","JSON","TYPE_BIGINT","keyFor","Symbol","Error","TYPE_SYMBOL","isArray","Array","pluginHandled","plugin","pluginResult","pluginIdentifier","rest","v","result","i","HOLE","Date","TYPE_DATE","getTime","URL","TYPE_URL","href","RegExp","TYPE_REGEXP","source","flags","Set","size","TYPE_SET","val","Map","TYPE_MAP","flatMap","Promise","TYPE_PROMISE","TYPE_ERROR","message","name","getPrototypeOf","TYPE_NULL_OBJECT","isPlainObject","objectProtoNames","getOwnPropertyNames","prototype","sort","thing","proto"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.flatten = void 0;\nconst utils_js_1 = require(\"./utils.js\");\nfunction flatten(input) {\n    const { indices } = this;\n    const existing = indices.get(input);\n    if (existing)\n        return [existing];\n    if (input === undefined)\n        return utils_js_1.UNDEFINED;\n    if (input === null)\n        return utils_js_1.NULL;\n    if (Number.isNaN(input))\n        return utils_js_1.NAN;\n    if (input === Number.POSITIVE_INFINITY)\n        return utils_js_1.POSITIVE_INFINITY;\n    if (input === Number.NEGATIVE_INFINITY)\n        return utils_js_1.NEGATIVE_INFINITY;\n    if (input === 0 && 1 / input < 0)\n        return utils_js_1.NEGATIVE_ZERO;\n    const index = this.index++;\n    indices.set(input, index);\n    stringify.call(this, input, index);\n    return index;\n}\nexports.flatten = flatten;\nfunction stringify(input, index) {\n    const { deferred, plugins, postPlugins } = this;\n    const str = this.stringified;\n    const stack = [[input, index]];\n    while (stack.length > 0) {\n        const [input, index] = stack.pop();\n        const partsForObj = (obj) => Object.keys(obj)\n            .map((k) => `\"_${flatten.call(this, k)}\":${flatten.call(this, obj[k])}`)\n            .join(\",\");\n        let error = null;\n        switch (typeof input) {\n            case \"boolean\":\n            case \"number\":\n            case \"string\":\n                str[index] = JSON.stringify(input);\n                break;\n            case \"bigint\":\n                str[index] = `[\"${utils_js_1.TYPE_BIGINT}\",\"${input}\"]`;\n                break;\n            case \"symbol\": {\n                const keyFor = Symbol.keyFor(input);\n                if (!keyFor) {\n                    error = new Error(\"Cannot encode symbol unless created with Symbol.for()\");\n                }\n                else {\n                    str[index] = `[\"${utils_js_1.TYPE_SYMBOL}\",${JSON.stringify(keyFor)}]`;\n                }\n                break;\n            }\n            case \"object\": {\n                if (!input) {\n                    str[index] = `${utils_js_1.NULL}`;\n                    break;\n                }\n                const isArray = Array.isArray(input);\n                let pluginHandled = false;\n                if (!isArray && plugins) {\n                    for (const plugin of plugins) {\n                        const pluginResult = plugin(input);\n                        if (Array.isArray(pluginResult)) {\n                            pluginHandled = true;\n                            const [pluginIdentifier, ...rest] = pluginResult;\n                            str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                            if (rest.length > 0) {\n                                str[index] += `,${rest\n                                    .map((v) => flatten.call(this, v))\n                                    .join(\",\")}`;\n                            }\n                            str[index] += \"]\";\n                            break;\n                        }\n                    }\n                }\n                if (!pluginHandled) {\n                    let result = isArray ? \"[\" : \"{\";\n                    if (isArray) {\n                        for (let i = 0; i < input.length; i++)\n                            result +=\n                                (i ? \",\" : \"\") +\n                                    (i in input ? flatten.call(this, input[i]) : utils_js_1.HOLE);\n                        str[index] = `${result}]`;\n                    }\n                    else if (input instanceof Date) {\n                        str[index] = `[\"${utils_js_1.TYPE_DATE}\",${input.getTime()}]`;\n                    }\n                    else if (input instanceof URL) {\n                        str[index] = `[\"${utils_js_1.TYPE_URL}\",${JSON.stringify(input.href)}]`;\n                    }\n                    else if (input instanceof RegExp) {\n                        str[index] = `[\"${utils_js_1.TYPE_REGEXP}\",${JSON.stringify(input.source)},${JSON.stringify(input.flags)}]`;\n                    }\n                    else if (input instanceof Set) {\n                        if (input.size > 0) {\n                            str[index] = `[\"${utils_js_1.TYPE_SET}\",${[...input]\n                                .map((val) => flatten.call(this, val))\n                                .join(\",\")}]`;\n                        }\n                        else {\n                            str[index] = `[\"${utils_js_1.TYPE_SET}\"]`;\n                        }\n                    }\n                    else if (input instanceof Map) {\n                        if (input.size > 0) {\n                            str[index] = `[\"${utils_js_1.TYPE_MAP}\",${[...input]\n                                .flatMap(([k, v]) => [\n                                flatten.call(this, k),\n                                flatten.call(this, v),\n                            ])\n                                .join(\",\")}]`;\n                        }\n                        else {\n                            str[index] = `[\"${utils_js_1.TYPE_MAP}\"]`;\n                        }\n                    }\n                    else if (input instanceof Promise) {\n                        str[index] = `[\"${utils_js_1.TYPE_PROMISE}\",${index}]`;\n                        deferred[index] = input;\n                    }\n                    else if (input instanceof Error) {\n                        str[index] = `[\"${utils_js_1.TYPE_ERROR}\",${JSON.stringify(input.message)}`;\n                        if (input.name !== \"Error\") {\n                            str[index] += `,${JSON.stringify(input.name)}`;\n                        }\n                        str[index] += \"]\";\n                    }\n                    else if (Object.getPrototypeOf(input) === null) {\n                        str[index] = `[\"${utils_js_1.TYPE_NULL_OBJECT}\",{${partsForObj(input)}}]`;\n                    }\n                    else if (isPlainObject(input)) {\n                        str[index] = `{${partsForObj(input)}}`;\n                    }\n                    else {\n                        error = new Error(\"Cannot encode object with prototype\");\n                    }\n                }\n                break;\n            }\n            default: {\n                const isArray = Array.isArray(input);\n                let pluginHandled = false;\n                if (!isArray && plugins) {\n                    for (const plugin of plugins) {\n                        const pluginResult = plugin(input);\n                        if (Array.isArray(pluginResult)) {\n                            pluginHandled = true;\n                            const [pluginIdentifier, ...rest] = pluginResult;\n                            str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                            if (rest.length > 0) {\n                                str[index] += `,${rest\n                                    .map((v) => flatten.call(this, v))\n                                    .join(\",\")}`;\n                            }\n                            str[index] += \"]\";\n                            break;\n                        }\n                    }\n                }\n                if (!pluginHandled) {\n                    error = new Error(\"Cannot encode function or unexpected type\");\n                }\n            }\n        }\n        if (error) {\n            let pluginHandled = false;\n            if (postPlugins) {\n                for (const plugin of postPlugins) {\n                    const pluginResult = plugin(input);\n                    if (Array.isArray(pluginResult)) {\n                        pluginHandled = true;\n                        const [pluginIdentifier, ...rest] = pluginResult;\n                        str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                        if (rest.length > 0) {\n                            str[index] += `,${rest\n                                .map((v) => flatten.call(this, v))\n                                .join(\",\")}`;\n                        }\n                        str[index] += \"]\";\n                        break;\n                    }\n                }\n            }\n            if (!pluginHandled) {\n                throw error;\n            }\n        }\n    }\n}\nconst objectProtoNames = Object.getOwnPropertyNames(Object.prototype)\n    .sort()\n    .join(\"\\0\");\nfunction isPlainObject(thing) {\n    const proto = Object.getPrototypeOf(thing);\n    return (proto === Object.prototype ||\n        proto === null ||\n        Object.getOwnPropertyNames(proto).sort().join(\"\\0\") === objectProtoNames);\n}\n"]},"metadata":{},"sourceType":"script"}